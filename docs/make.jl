using Documenter
using NestedSamplers
using Literate: markdown

# preprocess tutorials using Literate
srcdir = abspath(joinpath(@__DIR__, "..", "examples"))
outdir = abspath(joinpath(@__DIR__, "src"))

examples = map(Iterators.filter(endswith(".jl"), readdir(srcdir; join=true))) do file
    markdown(file, outdir)
    return replace(basename(file), ".jl" => ".md")
end

DocMeta.setdocmeta!(
    NestedSamplers,
    :DocTestSetup,
    :(using NestedSamplers);
    recursive=true
)

makedocs(
    sitename = "NestedSamplers.jl",
    pages = [
        "Home" => "index.md",
        "Examples" => examples,
        "Benchmarks" => "benchmarks.md",
        "API/Reference" => "api.md"
    ],
    format = Documenter.HTML(prettyurls = get(ENV, "CI", nothing) == "true"),
    modules = [NestedSamplers],
    # https://github.com/JuliaLang/julia/pull/37085#issuecomment-683356098
    doctestfilters = [
        r"{([a-zA-Z0-9]+,\s?)+[a-zA-Z0-9]+}",
        r"(Array{[a-zA-Z0-9]+,\s?1}|Vector{[a-zA-Z0-9]+})",
        r"(Array{[a-zA-Z0-9]+,\s?2}|Matrix{[a-zA-Z0-9]+})",
    ]
)

# clean up markdown files generated by Literate
map(f -> rm(joinpath(outdir, f)), examples)

# CI only: deploy docs
deploydocs(repo = "github.com/TuringLang/NestedSamplers.jl.git", push_preview=true, devbranch="main")
