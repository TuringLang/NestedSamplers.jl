---
options:
    out_path: ../README.md
    fig_path: docs/figures
    doctype: github
---
# NestedSamplers.jl

[![Build Status](https://github.com/turinglang/NestedSamplers.jl/workflows/CI/badge.svg?branch=master)](https://github.com/turinglang/NestedSamplers.jl/actions)
[![PkgEval](https://juliaci.github.io/NanosoldierReports/pkgeval_badges/N/NestedSamplers.svg)](https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html)
[![Coverage](https://codecov.io/gh/turinglang/NestedSamplers.jl/branch/master/graph/badge.svg)](https://codecov.io/gh/turinglang/NestedSamplers.jl)

[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3950594.svg)](https://doi.org/10.5281/zenodo.3950594)

A Julian implementation of single- and multi-ellipsoidal nested sampling algorithms using the [AbstractMCMC](https://github.com/turinglang/abstractmcmc.jl) interface.

This package was heavily influenced by [`nestle`](https://github.com/kbarbary/nestle), [`dynesty`](https://github.com/joshspeagle/dynesty), and [`NestedSampling.jl`](https://github.com/kbarbary/NestedSampling.jl).


## Installation

To use the nested samplers first install this library

```julia; eval=false
julia> ]add NestedSamplers
```

## Usage

The samplers are built using the [AbstractMCMC](https://github.com/turinglang/abstractmcmc.jl) interface. To use it, we need to create a `NestedModel`.

```julia; echo=false
using Random
Random.seed!(8452);
```

```julia
using NestedSamplers
using Distributions

# eggbox likelihood function
tmax = 3π
function logl(x)
    t = @. 2 * tmax * x - tmax
    return 2 + cos(t[1]/2) * cos(t[2]/2)^5
end
priors = [
    Uniform(0, 1),
    Uniform(0, 1)
]
# or equivalently
prior_transform(X) = X
# create the model
model = NestedModel(logl, priors); # or model = NestedModel(logl, prior_transform)
```

now, we set up our sampling using [StatsBase](https://github.com/JuliaStats/StatsBase.jl)

```julia
using StatsBase: sample, Weights
using MCMCChains: Chains

# create our sampler
# 2 parameters, 100 active points, multi-ellipsoid. See docstring
spl = Nested(2, 100, bounds=Bounds.MultiEllipsoid)
# by default, uses dlogz_convergence. Set the keyword args here
# currently Chains and Array are support chain_types
chain = sample(model, spl;
               dlogz=0.2,
               param_names=["x", "y"],
               chain_type=Chains)
```

```julia
using StatsPlots
density(chain)
# analytical posterior maxima
vline!([1/2 - π/tmax, 1/2, 1/2 + π/tmax], c=:black, ls=:dash, subplot=1)
vline!([1/2 - π/tmax, 1/2, 1/2 + π/tmax], c=:black, ls=:dash, subplot=2)
```

## API/Reference

### Samplers
```julia; echo=false
@doc NestedModel
```
---
```julia; echo=false
@doc Nested
```

---
### Bounds
```julia; echo=false
@doc Bounds
```
---
```julia; echo=false
@doc Bounds.NoBounds
```
---
```julia; echo=false
@doc Bounds.Ellipsoid
```
---
```julia; echo=false
@doc Bounds.MultiEllipsoid
```

---
### Proposals

```julia; echo=false
@doc Proposals
```
---
```julia; echo=false
@doc Proposals.Uniform
```
---
```julia; echo=false
@doc Proposals.RWalk
```
---
```julia; echo=false
@doc Proposals.RStagger
```
---
```julia; echo=false
@doc Proposals.Slice
```
---
```julia; echo=false
@doc Proposals.RSlice
```
---
```julia; echo=false
@doc Proposals.HSlice
```
---
### Convergence
```julia; echo=false
@doc dlogz_convergence
```
---
```julia; echo=false
@doc decline_convergence
```

## Contributing
**Primary Author:** Miles Lucas ([@mileslucas](https://github.com/mileslucas))

Contributions are always welcome! Take a look at the [issues](https://github.com/turinglang/nestedsamplers.jl/issues) for ideas of open problems!

---

This file was generated from [README.jmd](docs/README.jmd) using [Weave.jl](https://github.com/JunoLab/Weave.jl)
